/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: ocean.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace ocean {
    export class IfInfoHashExistsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            info_hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("info_hash" in data && data.info_hash != undefined) {
                    this.info_hash = data.info_hash;
                }
            }
        }
        get info_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set info_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            info_hash?: Uint8Array;
        }): IfInfoHashExistsRequest {
            const message = new IfInfoHashExistsRequest({});
            if (data.info_hash != null) {
                message.info_hash = data.info_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                info_hash?: Uint8Array;
            } = {};
            if (this.info_hash != null) {
                data.info_hash = this.info_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.info_hash.length)
                writer.writeBytes(1, this.info_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IfInfoHashExistsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IfInfoHashExistsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.info_hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IfInfoHashExistsRequest {
            return IfInfoHashExistsRequest.deserialize(bytes);
        }
    }
    export class IfInfoHashExistsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            exists?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exists" in data && data.exists != undefined) {
                    this.exists = data.exists;
                }
            }
        }
        get exists() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set exists(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            exists?: boolean;
        }): IfInfoHashExistsResponse {
            const message = new IfInfoHashExistsResponse({});
            if (data.exists != null) {
                message.exists = data.exists;
            }
            return message;
        }
        toObject() {
            const data: {
                exists?: boolean;
            } = {};
            if (this.exists != null) {
                data.exists = this.exists;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.exists != false)
                writer.writeBool(1, this.exists);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IfInfoHashExistsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IfInfoHashExistsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.exists = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IfInfoHashExistsResponse {
            return IfInfoHashExistsResponse.deserialize(bytes);
        }
    }
    export class BatchInfoHashExistRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            info_hashes?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("info_hashes" in data && data.info_hashes != undefined) {
                    this.info_hashes = data.info_hashes;
                }
            }
        }
        get info_hashes() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set info_hashes(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            info_hashes?: Uint8Array[];
        }): BatchInfoHashExistRequest {
            const message = new BatchInfoHashExistRequest({});
            if (data.info_hashes != null) {
                message.info_hashes = data.info_hashes;
            }
            return message;
        }
        toObject() {
            const data: {
                info_hashes?: Uint8Array[];
            } = {};
            if (this.info_hashes != null) {
                data.info_hashes = this.info_hashes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.info_hashes.length)
                writer.writeRepeatedBytes(1, this.info_hashes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchInfoHashExistRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchInfoHashExistRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchInfoHashExistRequest {
            return BatchInfoHashExistRequest.deserialize(bytes);
        }
    }
    export class BatchInfoHashExistResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            results?: boolean[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("results" in data && data.results != undefined) {
                    this.results = data.results;
                }
            }
        }
        get results() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as boolean[];
        }
        set results(value: boolean[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            results?: boolean[];
        }): BatchInfoHashExistResponse {
            const message = new BatchInfoHashExistResponse({});
            if (data.results != null) {
                message.results = data.results;
            }
            return message;
        }
        toObject() {
            const data: {
                results?: boolean[];
            } = {};
            if (this.results != null) {
                data.results = this.results;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.results.length)
                writer.writePackedBool(1, this.results);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchInfoHashExistResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchInfoHashExistResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.results = reader.readPackedBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchInfoHashExistResponse {
            return BatchInfoHashExistResponse.deserialize(bytes);
        }
    }
    export class File extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            length?: number;
            paths?: string[];
            file_hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("length" in data && data.length != undefined) {
                    this.length = data.length;
                }
                if ("paths" in data && data.paths != undefined) {
                    this.paths = data.paths;
                }
                if ("file_hash" in data && data.file_hash != undefined) {
                    this.file_hash = data.file_hash;
                }
            }
        }
        get length() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set length(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get paths() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set paths(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get file_hash() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set file_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            length?: number;
            paths?: string[];
            file_hash?: Uint8Array;
        }): File {
            const message = new File({});
            if (data.length != null) {
                message.length = data.length;
            }
            if (data.paths != null) {
                message.paths = data.paths;
            }
            if (data.file_hash != null) {
                message.file_hash = data.file_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                length?: number;
                paths?: string[];
                file_hash?: Uint8Array;
            } = {};
            if (this.length != null) {
                data.length = this.length;
            }
            if (this.paths != null) {
                data.paths = this.paths;
            }
            if (this.file_hash != null) {
                data.file_hash = this.file_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.length != 0)
                writer.writeInt64(1, this.length);
            if (this.paths.length)
                writer.writeRepeatedString(2, this.paths);
            if (this.file_hash.length)
                writer.writeBytes(3, this.file_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): File {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new File();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.length = reader.readInt64();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.file_hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): File {
            return File.deserialize(bytes);
        }
    }
    export class CommitTorrentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            info_hash?: Uint8Array;
            name?: string;
            publisher?: string;
            source?: string;
            files?: File[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("info_hash" in data && data.info_hash != undefined) {
                    this.info_hash = data.info_hash;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("publisher" in data && data.publisher != undefined) {
                    this.publisher = data.publisher;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
            }
        }
        get info_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set info_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get publisher() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set publisher(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, File, 5) as File[];
        }
        set files(value: File[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            info_hash?: Uint8Array;
            name?: string;
            publisher?: string;
            source?: string;
            files?: ReturnType<typeof File.prototype.toObject>[];
        }): CommitTorrentRequest {
            const message = new CommitTorrentRequest({});
            if (data.info_hash != null) {
                message.info_hash = data.info_hash;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.publisher != null) {
                message.publisher = data.publisher;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.files != null) {
                message.files = data.files.map(item => File.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                info_hash?: Uint8Array;
                name?: string;
                publisher?: string;
                source?: string;
                files?: ReturnType<typeof File.prototype.toObject>[];
            } = {};
            if (this.info_hash != null) {
                data.info_hash = this.info_hash;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.publisher != null) {
                data.publisher = this.publisher;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.files != null) {
                data.files = this.files.map((item: File) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.info_hash.length)
                writer.writeBytes(1, this.info_hash);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.publisher.length)
                writer.writeString(3, this.publisher);
            if (this.source.length)
                writer.writeString(4, this.source);
            if (this.files.length)
                writer.writeRepeatedMessage(5, this.files, (item: File) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitTorrentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitTorrentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.info_hash = reader.readBytes();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.publisher = reader.readString();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 5, File.deserialize(reader), File));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitTorrentRequest {
            return CommitTorrentRequest.deserialize(bytes);
        }
    }
    export class CommitTorrentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CommitTorrentResponse {
            const message = new CommitTorrentResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitTorrentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitTorrentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitTorrentResponse {
            return CommitTorrentResponse.deserialize(bytes);
        }
    }
    export class ListTorrentInfoForTrackerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            size?: number;
        }): ListTorrentInfoForTrackerRequest {
            const message = new ListTorrentInfoForTrackerRequest({});
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                size?: number;
            } = {};
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.size != 0)
                writer.writeInt64(1, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTorrentInfoForTrackerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTorrentInfoForTrackerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.size = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTorrentInfoForTrackerRequest {
            return ListTorrentInfoForTrackerRequest.deserialize(bytes);
        }
    }
    export class ListTorrentInfoForTrackerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            info_hashes?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("info_hashes" in data && data.info_hashes != undefined) {
                    this.info_hashes = data.info_hashes;
                }
            }
        }
        get info_hashes() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set info_hashes(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            info_hashes?: string[];
        }): ListTorrentInfoForTrackerResponse {
            const message = new ListTorrentInfoForTrackerResponse({});
            if (data.info_hashes != null) {
                message.info_hashes = data.info_hashes;
            }
            return message;
        }
        toObject() {
            const data: {
                info_hashes?: string[];
            } = {};
            if (this.info_hashes != null) {
                data.info_hashes = this.info_hashes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.info_hashes.length)
                writer.writeRepeatedString(1, this.info_hashes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTorrentInfoForTrackerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTorrentInfoForTrackerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTorrentInfoForTrackerResponse {
            return ListTorrentInfoForTrackerResponse.deserialize(bytes);
        }
    }
    export class UpdateTrackerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            info_hash?: string;
            seeders?: number;
            leechers?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("info_hash" in data && data.info_hash != undefined) {
                    this.info_hash = data.info_hash;
                }
                if ("seeders" in data && data.seeders != undefined) {
                    this.seeders = data.seeders;
                }
                if ("leechers" in data && data.leechers != undefined) {
                    this.leechers = data.leechers;
                }
            }
        }
        get info_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set info_hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get seeders() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set seeders(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get leechers() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set leechers(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            info_hash?: string;
            seeders?: number;
            leechers?: number;
        }): UpdateTrackerRequest {
            const message = new UpdateTrackerRequest({});
            if (data.info_hash != null) {
                message.info_hash = data.info_hash;
            }
            if (data.seeders != null) {
                message.seeders = data.seeders;
            }
            if (data.leechers != null) {
                message.leechers = data.leechers;
            }
            return message;
        }
        toObject() {
            const data: {
                info_hash?: string;
                seeders?: number;
                leechers?: number;
            } = {};
            if (this.info_hash != null) {
                data.info_hash = this.info_hash;
            }
            if (this.seeders != null) {
                data.seeders = this.seeders;
            }
            if (this.leechers != null) {
                data.leechers = this.leechers;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.info_hash.length)
                writer.writeString(1, this.info_hash);
            if (this.seeders != 0)
                writer.writeUint32(2, this.seeders);
            if (this.leechers != 0)
                writer.writeUint32(3, this.leechers);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTrackerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTrackerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.info_hash = reader.readString();
                        break;
                    case 2:
                        message.seeders = reader.readUint32();
                        break;
                    case 3:
                        message.leechers = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTrackerRequest {
            return UpdateTrackerRequest.deserialize(bytes);
        }
    }
    export class UpdateTrackerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateTrackerResponse {
            const message = new UpdateTrackerResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTrackerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTrackerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTrackerResponse {
            return UpdateTrackerResponse.deserialize(bytes);
        }
    }
    export class BatchUpdateTrackerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requests?: UpdateTrackerRequest[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requests" in data && data.requests != undefined) {
                    this.requests = data.requests;
                }
            }
        }
        get requests() {
            return pb_1.Message.getRepeatedWrapperField(this, UpdateTrackerRequest, 1) as UpdateTrackerRequest[];
        }
        set requests(value: UpdateTrackerRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            requests?: ReturnType<typeof UpdateTrackerRequest.prototype.toObject>[];
        }): BatchUpdateTrackerRequest {
            const message = new BatchUpdateTrackerRequest({});
            if (data.requests != null) {
                message.requests = data.requests.map(item => UpdateTrackerRequest.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                requests?: ReturnType<typeof UpdateTrackerRequest.prototype.toObject>[];
            } = {};
            if (this.requests != null) {
                data.requests = this.requests.map((item: UpdateTrackerRequest) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requests.length)
                writer.writeRepeatedMessage(1, this.requests, (item: UpdateTrackerRequest) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchUpdateTrackerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchUpdateTrackerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.requests, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UpdateTrackerRequest.deserialize(reader), UpdateTrackerRequest));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchUpdateTrackerRequest {
            return BatchUpdateTrackerRequest.deserialize(bytes);
        }
    }
    export class BatchUpdateTrackerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): BatchUpdateTrackerResponse {
            const message = new BatchUpdateTrackerResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchUpdateTrackerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchUpdateTrackerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchUpdateTrackerResponse {
            return BatchUpdateTrackerResponse.deserialize(bytes);
        }
    }
    export class SortParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            field?: string;
            asc?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("asc" in data && data.asc != undefined) {
                    this.asc = data.asc;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get asc() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set asc(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            field?: string;
            asc?: boolean;
        }): SortParams {
            const message = new SortParams({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.asc != null) {
                message.asc = data.asc;
            }
            return message;
        }
        toObject() {
            const data: {
                field?: string;
                asc?: boolean;
            } = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.asc != null) {
                data.asc = this.asc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.asc != false)
                writer.writeBool(2, this.asc);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.asc = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SortParams {
            return SortParams.deserialize(bytes);
        }
    }
    export class SearchTorrentsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            keyword?: string;
            per_page?: number;
            page?: number;
            sort_params?: SortParams[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
                if ("per_page" in data && data.per_page != undefined) {
                    this.per_page = data.per_page;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("sort_params" in data && data.sort_params != undefined) {
                    this.sort_params = data.sort_params;
                }
            }
        }
        get keyword() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set keyword(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get per_page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set per_page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get sort_params() {
            return pb_1.Message.getRepeatedWrapperField(this, SortParams, 4) as SortParams[];
        }
        set sort_params(value: SortParams[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            keyword?: string;
            per_page?: number;
            page?: number;
            sort_params?: ReturnType<typeof SortParams.prototype.toObject>[];
        }): SearchTorrentsRequest {
            const message = new SearchTorrentsRequest({});
            if (data.keyword != null) {
                message.keyword = data.keyword;
            }
            if (data.per_page != null) {
                message.per_page = data.per_page;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.sort_params != null) {
                message.sort_params = data.sort_params.map(item => SortParams.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                keyword?: string;
                per_page?: number;
                page?: number;
                sort_params?: ReturnType<typeof SortParams.prototype.toObject>[];
            } = {};
            if (this.keyword != null) {
                data.keyword = this.keyword;
            }
            if (this.per_page != null) {
                data.per_page = this.per_page;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.sort_params != null) {
                data.sort_params = this.sort_params.map((item: SortParams) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.keyword.length)
                writer.writeString(1, this.keyword);
            if (this.per_page != 0)
                writer.writeUint32(2, this.per_page);
            if (this.page != 0)
                writer.writeUint32(3, this.page);
            if (this.sort_params.length)
                writer.writeRepeatedMessage(4, this.sort_params, (item: SortParams) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchTorrentsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchTorrentsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.keyword = reader.readString();
                        break;
                    case 2:
                        message.per_page = reader.readUint32();
                        break;
                    case 3:
                        message.page = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.sort_params, () => pb_1.Message.addToRepeatedWrapperField(message, 4, SortParams.deserialize(reader), SortParams));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchTorrentsRequest {
            return SearchTorrentsRequest.deserialize(bytes);
        }
    }
    export class Torrent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            info_hash?: string;
            name?: string;
            publisher?: string;
            source?: string;
            seeders?: number;
            leechers?: number;
            files?: File[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("info_hash" in data && data.info_hash != undefined) {
                    this.info_hash = data.info_hash;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("publisher" in data && data.publisher != undefined) {
                    this.publisher = data.publisher;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("seeders" in data && data.seeders != undefined) {
                    this.seeders = data.seeders;
                }
                if ("leechers" in data && data.leechers != undefined) {
                    this.leechers = data.leechers;
                }
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
            }
        }
        get info_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set info_hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get publisher() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set publisher(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get seeders() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set seeders(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get leechers() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set leechers(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, File, 7) as File[];
        }
        set files(value: File[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            info_hash?: string;
            name?: string;
            publisher?: string;
            source?: string;
            seeders?: number;
            leechers?: number;
            files?: ReturnType<typeof File.prototype.toObject>[];
        }): Torrent {
            const message = new Torrent({});
            if (data.info_hash != null) {
                message.info_hash = data.info_hash;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.publisher != null) {
                message.publisher = data.publisher;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.seeders != null) {
                message.seeders = data.seeders;
            }
            if (data.leechers != null) {
                message.leechers = data.leechers;
            }
            if (data.files != null) {
                message.files = data.files.map(item => File.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                info_hash?: string;
                name?: string;
                publisher?: string;
                source?: string;
                seeders?: number;
                leechers?: number;
                files?: ReturnType<typeof File.prototype.toObject>[];
            } = {};
            if (this.info_hash != null) {
                data.info_hash = this.info_hash;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.publisher != null) {
                data.publisher = this.publisher;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.seeders != null) {
                data.seeders = this.seeders;
            }
            if (this.leechers != null) {
                data.leechers = this.leechers;
            }
            if (this.files != null) {
                data.files = this.files.map((item: File) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.info_hash.length)
                writer.writeString(1, this.info_hash);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.publisher.length)
                writer.writeString(3, this.publisher);
            if (this.source.length)
                writer.writeString(4, this.source);
            if (this.seeders != 0)
                writer.writeUint32(5, this.seeders);
            if (this.leechers != 0)
                writer.writeUint32(6, this.leechers);
            if (this.files.length)
                writer.writeRepeatedMessage(7, this.files, (item: File) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Torrent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Torrent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.info_hash = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.publisher = reader.readString();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        message.seeders = reader.readUint32();
                        break;
                    case 6:
                        message.leechers = reader.readUint32();
                        break;
                    case 7:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 7, File.deserialize(reader), File));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Torrent {
            return Torrent.deserialize(bytes);
        }
    }
    export class TorrentPageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            torrents?: Torrent[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("torrents" in data && data.torrents != undefined) {
                    this.torrents = data.torrents;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get torrents() {
            return pb_1.Message.getRepeatedWrapperField(this, Torrent, 1) as Torrent[];
        }
        set torrents(value: Torrent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            torrents?: ReturnType<typeof Torrent.prototype.toObject>[];
            total?: number;
        }): TorrentPageResponse {
            const message = new TorrentPageResponse({});
            if (data.torrents != null) {
                message.torrents = data.torrents.map(item => Torrent.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                torrents?: ReturnType<typeof Torrent.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.torrents != null) {
                data.torrents = this.torrents.map((item: Torrent) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.torrents.length)
                writer.writeRepeatedMessage(1, this.torrents, (item: Torrent) => item.serialize(writer));
            if (this.total != 0)
                writer.writeUint32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TorrentPageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TorrentPageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.torrents, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Torrent.deserialize(reader), Torrent));
                        break;
                    case 2:
                        message.total = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TorrentPageResponse {
            return TorrentPageResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedOceanService {
        static definition = {
            IfInfoHashExists: {
                path: "/ocean.Ocean/IfInfoHashExists",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IfInfoHashExistsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IfInfoHashExistsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IfInfoHashExistsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IfInfoHashExistsResponse.deserialize(new Uint8Array(bytes))
            },
            BatchInfoHashExist: {
                path: "/ocean.Ocean/BatchInfoHashExist",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchInfoHashExistRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchInfoHashExistRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BatchInfoHashExistResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BatchInfoHashExistResponse.deserialize(new Uint8Array(bytes))
            },
            CommitTorrent: {
                path: "/ocean.Ocean/CommitTorrent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CommitTorrentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CommitTorrentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CommitTorrentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CommitTorrentResponse.deserialize(new Uint8Array(bytes))
            },
            ListTorrentInfoForTracker: {
                path: "/ocean.Ocean/ListTorrentInfoForTracker",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListTorrentInfoForTrackerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListTorrentInfoForTrackerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListTorrentInfoForTrackerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListTorrentInfoForTrackerResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateTracker: {
                path: "/ocean.Ocean/UpdateTracker",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateTrackerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateTrackerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateTrackerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateTrackerResponse.deserialize(new Uint8Array(bytes))
            },
            BatchUpdateTracker: {
                path: "/ocean.Ocean/BatchUpdateTracker",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchUpdateTrackerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchUpdateTrackerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BatchUpdateTrackerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BatchUpdateTrackerResponse.deserialize(new Uint8Array(bytes))
            },
            SearchTorrents: {
                path: "/ocean.Ocean/SearchTorrents",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchTorrentsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchTorrentsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TorrentPageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TorrentPageResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract IfInfoHashExists(call: grpc_1.ServerUnaryCall<IfInfoHashExistsRequest, IfInfoHashExistsResponse>, callback: grpc_1.sendUnaryData<IfInfoHashExistsResponse>): void;
        abstract BatchInfoHashExist(call: grpc_1.ServerUnaryCall<BatchInfoHashExistRequest, BatchInfoHashExistResponse>, callback: grpc_1.sendUnaryData<BatchInfoHashExistResponse>): void;
        abstract CommitTorrent(call: grpc_1.ServerUnaryCall<CommitTorrentRequest, CommitTorrentResponse>, callback: grpc_1.sendUnaryData<CommitTorrentResponse>): void;
        abstract ListTorrentInfoForTracker(call: grpc_1.ServerUnaryCall<ListTorrentInfoForTrackerRequest, ListTorrentInfoForTrackerResponse>, callback: grpc_1.sendUnaryData<ListTorrentInfoForTrackerResponse>): void;
        abstract UpdateTracker(call: grpc_1.ServerUnaryCall<UpdateTrackerRequest, UpdateTrackerResponse>, callback: grpc_1.sendUnaryData<UpdateTrackerResponse>): void;
        abstract BatchUpdateTracker(call: grpc_1.ServerUnaryCall<BatchUpdateTrackerRequest, BatchUpdateTrackerResponse>, callback: grpc_1.sendUnaryData<BatchUpdateTrackerResponse>): void;
        abstract SearchTorrents(call: grpc_1.ServerUnaryCall<SearchTorrentsRequest, TorrentPageResponse>, callback: grpc_1.sendUnaryData<TorrentPageResponse>): void;
    }
    export class OceanClient extends grpc_1.makeGenericClientConstructor(UnimplementedOceanService.definition, "Ocean", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        IfInfoHashExists: GrpcPromiseServiceInterface<IfInfoHashExistsRequest, IfInfoHashExistsResponse> = (message: IfInfoHashExistsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<IfInfoHashExistsResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.IfInfoHashExists(message, metadata, options, (error: grpc_1.ServiceError, response: IfInfoHashExistsResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        BatchInfoHashExist: GrpcPromiseServiceInterface<BatchInfoHashExistRequest, BatchInfoHashExistResponse> = (message: BatchInfoHashExistRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<BatchInfoHashExistResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.BatchInfoHashExist(message, metadata, options, (error: grpc_1.ServiceError, response: BatchInfoHashExistResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        CommitTorrent: GrpcPromiseServiceInterface<CommitTorrentRequest, CommitTorrentResponse> = (message: CommitTorrentRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CommitTorrentResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.CommitTorrent(message, metadata, options, (error: grpc_1.ServiceError, response: CommitTorrentResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        ListTorrentInfoForTracker: GrpcPromiseServiceInterface<ListTorrentInfoForTrackerRequest, ListTorrentInfoForTrackerResponse> = (message: ListTorrentInfoForTrackerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ListTorrentInfoForTrackerResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.ListTorrentInfoForTracker(message, metadata, options, (error: grpc_1.ServiceError, response: ListTorrentInfoForTrackerResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        UpdateTracker: GrpcPromiseServiceInterface<UpdateTrackerRequest, UpdateTrackerResponse> = (message: UpdateTrackerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<UpdateTrackerResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.UpdateTracker(message, metadata, options, (error: grpc_1.ServiceError, response: UpdateTrackerResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        BatchUpdateTracker: GrpcPromiseServiceInterface<BatchUpdateTrackerRequest, BatchUpdateTrackerResponse> = (message: BatchUpdateTrackerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<BatchUpdateTrackerResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.BatchUpdateTracker(message, metadata, options, (error: grpc_1.ServiceError, response: BatchUpdateTrackerResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        SearchTorrents: GrpcPromiseServiceInterface<SearchTorrentsRequest, TorrentPageResponse> = (message: SearchTorrentsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<TorrentPageResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.SearchTorrents(message, metadata, options, (error: grpc_1.ServiceError, response: TorrentPageResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
    }
}
